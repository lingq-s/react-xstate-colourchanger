{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","prompt","grammar","person","day","time","grammar2","a","b","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","actions","assign","context","option","recResult","target","entry","ENDSPEECH","ask","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","welcomemessage","always","who","nomatch","is_whole","confirm_time","confirm_whole","end","fetch","Request","proxyurl","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.276059b1.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH : 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n        }})\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"William\": { person: \"William Windmill \"},\n    \"Patrick\": { person: \"Patrick Wong\" }, \n    \"Eva\": { person: \"Eva Thompson\"},\n    \"My father\": { person: \"your father\" },\n\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n\n    \"at eight\": { time: \"08:00\" },\n    \"at nine\": { time: \"09:00\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at eleven\": { time: \"11:00\" },\n    \"at twelve\": { time: \"12:00\" },\n    \"at one\": { time: \"13:00\" },\n    \"at two\": { time: \"14:00\" },\n    \"at three\": { time: \"15:00\" },\n    \"at four\": { time: \"16:00\" },\n    \"at five o'clock\": { time: \"17:00\" },\n\n}\n\nconst grammar2: { [index: string]: boolean } = {\n    \"Yes\": true,\n    \"yes\": true,\n    \"indeed\": true,\n    \"that sounds good\": true,\n    \"yes of course\": true,\n    \"absolutely\": true,\n    \"of course\": true,\n\n    \"No\": false, \n    \"n\": false,\n    \"I don't think so\": false,\n    \"no\": false,\n    \"never\": false,\n    \"not really\": false,\n    \"no way\": false\n\n}\n\nlet a = grammar2[\"yes\"]\nlet b = grammar2[\"no\"]\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    actions: assign ((context) => { return { option: context.recResult } }),\n                    target: \"query\"\n                }\n            },\n            ...promptAndAsk ('What would you like to do?')\n        },\n\n        query: {\n            invoke:{\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: 'menu',\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'welcomemessage', cond: (context) => context.option === 'todo' },\n                    { target: 'welcomemessage', cond: (context) => context.option === 'timer' },\n                    { target: 'who', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n        welcomemessage: {\n            entry: say (\"Okay.\"),\n            always: \"init\"\n\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"is_whole\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`})),\n                    on: {ENDSPEECH: \"ask\"}\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"I didn't get you.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        is_whole:{\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => (grammar2[context.recResult] === a),\n                    target: \"confirm_whole\"\n                },\n                {\n                    cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"time\"\n                },\n                { target: \".nomatch\"}]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Will it take the whole day?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"I didn't get it.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        time: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n                \n                },\n                {target: \".nomatch\"}]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What time is your meeting?\"),\n                    on: { ENDSPEECH: \"ask\"}\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Could you repeat that?\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirm_time:{\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => (grammar2[context.recResult] === a),\n                    target: \"end\"\n                },\n                {\n                    cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"who\"\n                },\n                { target: \".nomatch\"}]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?` })),\n                    on: {ENDSPEECH: \"ask\"}\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Excuse me?\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirm_whole:{\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => (grammar2[context.recResult] === a),\n                    target: \"end\"\n                },\n                {\n                    cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"who\"\n                },\n                { target: \".nomatch\"}]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`,\n                    })),\n                    on: {ENDSPEECH: \"ask\"}\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Excuse me?\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        end: {\n            entry: say(\"Your appointment has been created.\"),\n            always: 'init'\n        }\n    }\n})\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://lingqs-intent.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n\t\t    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \tprogress: {\n\t\t\t},\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://ds-lab2.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}