{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","grammar2","affirm","deny","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","actions","assign","context","query","recResult","target","prompt","entry","ENDSPEECH","ask","invoke","id","src","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","cond","onError","welcomemessage","always","who","nomatch","is_whole","confirm_time","confirm_whole","end","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.3f6c695a.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt),\r\n                on: { ENDSPEECH : 'ask' }\r\n            },\r\n            ask: {\r\n                entry: send('LISTEN'),\r\n            },\r\n        }})\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"William\": { person: \"William Windmill \"},\r\n    \"Patrick\": { person: \"Patrick Wong\" }, \r\n    \"Eva\": { person: \"Eva Thompson\"},\r\n    \"My father\": { person: \"your father\" },\r\n\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n\r\n    \"at eight\": { time: \"08:00\" },\r\n    \"at nine\": { time: \"09:00\" },\r\n    \"at ten\": { time: \"10:00\" },\r\n    \"at eleven\": { time: \"11:00\" },\r\n    \"at twelve\": { time: \"12:00\" },\r\n    \"at one\": { time: \"13:00\" },\r\n    \"at two\": { time: \"14:00\" },\r\n    \"at three\": { time: \"15:00\" },\r\n    \"at four\": { time: \"16:00\" },\r\n    \"at five o'clock\": { time: \"17:00\" },\r\n\r\n}\r\n\r\nconst grammar2: { [index: string]: { affirm?: string, deny?: string } } = {\r\n    \"Yes\": { affirm: \"yes\" },\r\n    \"yes\": { affirm: \"yes\" },\r\n    \"indeed\": { affirm: \"yes\" },\r\n    \"that sounds good\": { affirm: \"yes\" },\r\n    \"yes of course\": { affirm: \"yes\" },\r\n    \"absolutely\": { affirm: \"yes\" },\r\n    \"of course\": { affirm: \"yes\" },\r\n\r\n    \"No\": { deny: \"no\"}, \r\n    \"n\": { deny: \"no\"},\r\n    \"I don't think so\": { deny: \"no\"},\r\n    \"no\": { deny: \"no\" },\r\n    \"never\": { deny: \"no\"},\r\n    \"not really\": { deny: \"no\"},\r\n    \"no way\": { deny: \"no\" }\r\n\r\n}\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://ds-lab2.herokuapp.com/model/parse'\r\nconst nluRequest = (query: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${query}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: {\r\n                    actions: assign ((context) => { return { query: context.recResult } }),\r\n                    target: \"query\"\r\n                }\r\n            },\r\n            ...promptAndAsk ('What would you like to do?')\r\n        },\r\n        query: {\r\n            invoke:{\r\n                id: 'rasa',\r\n                src: (context) => nluRequest(context.query),\r\n                onDone: [\r\n                    {cond: (context) => context === \"appointment\",\r\n\t                target: \"who\"},\r\n\t                {target: \"welcomemessage\" },                 \r\n                ],\r\n                onError: \"welcome\"\r\n            }\r\n        },\r\n        welcomemessage: {\r\n            entry: say (\"Okay.\"),\r\n            always: \"init\"\r\n\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"is_whole\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`})),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"I didn't get you.\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        is_whole:{\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"affirm\" in (grammar2[context.recResult] || {}),\r\n                    target: \"confirm_whole\"\r\n                },\r\n                {\r\n                    cond: (context) => \"deny\" in (grammar2[context.recResult] || {}),\r\n                    target: \"time\"\r\n                },\r\n                { target: \".nomatch\"}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"I didn't get it.\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: { \r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"confirm_time\"\r\n                \r\n                },\r\n                {target: \".nomatch\"}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: { ENDSPEECH: \"ask\"}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Could you repeat that?\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        confirm_time:{\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"affirm\" in (grammar2[context.recResult] || {}),\r\n                    target: \"end\"\r\n                },\r\n                {\r\n                    cond: (context) => \"deny\" in (grammar2[context.recResult] || {}),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\"}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?` })),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Excuse me?\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        confirm_whole:{\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"affirm\" in (grammar2[context.recResult] || {}),\r\n                    target: \"end\"\r\n                },\r\n                {\r\n                    cond: (context) => \"deny\" in (grammar2[context.recResult] || {}),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\"}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`,\r\n                    })),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Excuse me?\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        end: {\r\n            entry: say(\"Your appointment has been created.\"),\r\n            always: 'init'\r\n        }\r\n    }\r\n})\r\n\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n\t\t    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n\t\t    \tprogress: {\r\n\t\t\t},\t    \t\t\t\t\t\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://ds-lab2.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}